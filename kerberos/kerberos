#!/usr/bin/env python3

# Show expiry information of kerberos tickets and eventually refresh them.

# Copyright 2017 Johannes Lange
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import argparse
import subprocess as sp
import re, os
from datetime import datetime, timedelta

parser = argparse.ArgumentParser(
    description='Show kerberos ticket expiry information.',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
)
parser.add_argument('--auto-refresh', type=int, default=None, metavar='DELTA',
                    help='Auto refresh DELTA before token expiry [h].')
parser.add_argument('--afs', action='store_true',
                    help='Also refresh existing afs tokens.')
args = parser.parse_args()

if 'BLOCK_INSTANCE' in os.environ:
    os.environ['KRB5CCNAME'] = os.environ['BLOCK_INSTANCE']

refresh = 'BLOCK_BUTTON' in os.environ and os.environ['BLOCK_BUTTON'] in ['2', '3']

def get_timeleft():
    lines = sp.check_output(['klist'], universal_newlines=True).splitlines()[4:]
    timeleft = None
    now = datetime.now()
    for line in lines:
        line = line.split()
        if re.match(r'^.*/.*@.*$', line[-1]):
            # principal = line[-1]
            expiry = datetime.strptime(line[2] + ' ' + line[3], '%m/%d/%Y %H:%M:%S')
            if timeleft is None:
                timeleft = expiry - now
            else:
                timeleft = min(timeleft, expiry - now)
    return timeleft

timeleft = get_timeleft()

refresh = refresh or (args.auto_refresh and timeleft < timedelta(hours=args.auto_refresh))
if refresh:
    sp.call(['kinit', '-R'])
    if args.afs:
        sp.call(['aklog'])
    timeleft = get_timeleft()

print(':'.join(str(timeleft).split(':')[:-1]))

