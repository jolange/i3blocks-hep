#!/usr/bin/env python3

# Show grid-control information from the monitoring directory.

# Copyright 2017 Johannes Lange
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import collections
import datetime
import glob
import json
import os
import time


task_id_trunc = 6
timestamp_warning_threshold = 30  # sec
short_output_threshold = 3  # tasks


if 'GC_MONITOR_DIR' in os.environ:
    directory = os.environ['GC_MONITOR_DIR']
else:
    # raise Exception("Environment variable 'GC_MONITOR_DIR' has to be set")
    directory = "~/afs/playground/gc_mon/"

block_button = os.environ['BLOCK_BUTTON'] if 'BLOCK_BUTTON' in os.environ else None
block_button = int(block_button) if block_button else None
# right click triggers deletion of the status json
# of a completely processed task
delete_completed = block_button is 3
# middle click deletes all
delete_all = block_button is 2
# show and extended info popup
info_popup = block_button is 1

# excluded SUCCESS
state_order = ['INIT', 'SUBMITTED', 'DISABLED', 'READY', 'WAITING', 'QUEUED',
               'ABORTED', 'RUNNING', 'CANCEL', 'UNKNOWN', 'CANCELLED', 'DONE',
               'FAILED']
state_short = {
    'INIT': 'I',
    'SUBMITTED': 'S',
    'DISABLED': 'DISABLED',
    'READY': 'READY',
    'WAITING': 'WAITING',
    'QUEUED': 'Q',
    'ABORTED': 'ABORTED',
    'RUNNING': 'R',
    'CANCEL': 'CANCEL',
    'UNKNOWN': 'UNKNOWN',
    'CANCELLED': 'CANCELLED',
    'DONE': 'DONE',
    'FAILED': 'F',
}


def colorize(string, color=None, bold=False):
    weight = ''
    if bold:
        weight = " weight='bold'"
    if color:
        return "<span color='{}'{}>{}</span>".format(color, weight, string)
    return string


def get_task_output(states):
    output = ""
    # treat success separately
    success = states["SUCCESS"]
    total = success
    for state in state_order:
        count = states[state]
        total += count
        if count >= 1:
            add = "{} {}".format(state_short[state], count)
            color = None
            if state == 'FAILED':
                color = 'red'
            elif state not in ('QUEUED', 'RUNNING', 'DONE'):
                color = '#8CD0D3'
            output += colorize(add, color) + ' '
        # print (state,count)
    output += "{}/{} ({:.0f}%)".format(success, total,
                                       100. * success / total if total else 0)
    done = total and success == total
    if done:
        output = colorize(output, '#7F9F7F', bold=True)
    return output, done

# expand environment variables etc.
directory = os.path.expandvars(directory)
directory = os.path.expanduser(directory)

outputs = []
extended_info = []
states_total = collections.defaultdict(int)
n_tasks = 0
n_tasks_done = 0
for fname in glob.glob(directory + "/*.json"):
    with open(fname) as json_file:
        task_info = json.load(json_file)
    timestamp_diff = time.time() - os.path.getmtime(fname)
    task_id = task_info['task id']
    output = task_id[2:task_id_trunc]
    info = "<span weight='bold'>%s</span>" % task_id + ' (%s)\n' % task_info['name']
    if task_info['gc state'] != 'terminated' and timestamp_diff > timestamp_warning_threshold:
        task_info['gc state'] = "crashed %s ago?" % datetime.timedelta(seconds=int(timestamp_diff))
    done = False
    task_output = ""
    if 'states' in task_info:
        states = task_info['states']
        for state, count in states.items():
            states_total[state] += count
        task_output, done = get_task_output(states)
        task_output = " " + task_output
    if task_info['gc state'] != 'running' and not done:
        output += " <span color='red'>{}</span>".format(task_info['gc state'])
    output += task_output
    info += task_info['gc state'] + '\n'
    info += task_output + '\n'
    if delete_all or (done and delete_completed):
        output = "<span strikethrough='true'>{}</span>".format(output)
        os.remove(fname)
    outputs.append(output)
    extended_info.append(info)

    n_tasks += 1
    if done:
        n_tasks_done += 1

if outputs:
    if n_tasks <= short_output_threshold:
        print("GC " + " - ".join(outputs))
    print("GC %d/%d tasks:" % (n_tasks_done, n_tasks), get_task_output(states_total)[0])
else:
    print(u"GC \uf165")

if info_popup:
    os.system('notify-send -u low -t 0 "%s"' % '\n'.join(extended_info))
